cont
contr
cont
ActiveRecord::Base.connection.execute("drop table test\;")
cont
ActiveRecord::Base.connection.execute("select * from test\;")
ActiveRecord::Base.connection.execute("insert into test (foo) values ('bloo')\;")
ActiveRecord::Base.connection.execute("select * from test\;")
ActiveRecord::Base.connection.execute("create table test (foo varchar(255))\;")
ActiveRecord::Base.connection.execute("select * from test\;")
ActiveRecord::Base.connection.execute("drop table if exists test\;")
ActiveRecord::Base.connection.execute("select * from test\;")
ActiveRecord::Base.connection.execute("insert into test (foo) values ('bloo')\;")
ActiveRecord::Base.connection.execute("select * from test\;")
ActiveRecord::Base.connection.execute("insert into test (foo) values ('baz')\;")
ActiveRecord::Base.connection.execute("select * from test\;")
cont
ActiveRecord::Base.connection.execute("select * from test\;")
ActiveRecord::Base.connection.execute("select * from test\;").first
cont
ActiveRecord::Base.connection.execute("insert into test set foo = 'bar'\;")cont
ActiveRecord::Base.connection.execute("insert into test set foo = 'bar'\;")
ActiveRecord::Base.connection.execute("select * from test\;").first
ActiveRecord::Base.connection.execute("select * from test\;")
cont
ActiveRecord::Base.connection.execute("select * from test\;")
ActiveRecord::Base.connection.execute("select * from test;")
cont
file.file.path
file.path
file.to_s
file
db_config['database']
pg_restore
file
cont
db_config['database']
pg_restore
cont
file.file.path
file.file.name
file.file.filename
file.file
file
cont
cat spec/dummy/tmp/sql_test.sql.gz
cat spec/dummy/tmp/sql_test.sql.gz 
system("gzip -d #{file}")
gzip -d file
cont
file
cont
exit
Pathname(File.dirname(file)).join('foo')
Pathname(File.dirname(file))
Pathame(File.dirname(file))
PathName(File.dirname(file))
Path(File.dirname(file))
File.dirname(file).join('foobar')
File.dirname(file)
File.public_methods.grep(/dir/)
file.public_methods.grep(/dir/)
file
file.path.dir
file.path
file.public_methods(false)
File.public_methods(false)
File.dir
Dir(file)
Dir.dir(file)
File.dir(file)
cont
exit
cont
system("gunzip #{Rails.root.join('tmp','sql_test.sql.gz')}")
system("gunzip")
File.exists?(Rails.root.join('tmp','sql_test.sql'))
File.exists?(Rails.root.join('tmp','sql_test.sql.gz'))
cont
DbBackup.new(:filename => file).file.path
DbBackup.new(:filename => file).file
DbBackup.new(:filename => file)
cont
sql
cont
sql
cont
sql
cont
sql
cont
sql
cont
sql
cont
sql
cont
sql
exit
ActiveRecord::Base.connection.execute("select * from test\;")
exit
ActiveRecord::Base.connection.execute("select * from test\;")
ActiveRecord::Base.connection.execute("select * from test;")
cont
 `#{pg_dump} apf_test`
 `#{pg_dump} get_back_test`
cont
 `#{pg_dump} apf_test`
 `#{pg_dump} -V`
 `"#{pg_dump} -V"`
 `"#{pg_dump}"`
 `"#{pg_dump} -V"`
 `"#{pg_dump} apf_test"`
 `"#{pg_dump} apf_development"`
 `"#{pg_dump} get_back_test"`
db_config
 `"#{pg_dump} get_back_test"`
 `"#{pg_dump} test"`
 `"#{pg_dump}"`
 `"#{pg_dump}  #{db_config['database']}"`
 `"#{pg_dump} -w -Fp --clean #{db_config['database']}"`
 `"#{pg_dump} -w -Fp --clean #{db_config['database']} > #{file}"`
cont
File.exists?("/Users/lesnightingill/Code/get_back/spec/dummy/tmp/sql_test.sql")
File.exists?(pg_dump)
pg_dump
cont
File.exists?(pg_dump)
File.exists?("/Users/lesnightingill/Code/get_back/spec/dummy/tmp/sql_test.sql")
cont
File.exists?("/Users/lesnightingill/Code/get_back/spec/dummy/tmp/sql_test.sql")
File.exists?("/Users/lesnightingill/Code/get_back/spec/dummy/tmp")
File.exists?("/Users/lesnightingill/Code/get_back/spoc")
File.exists?("/Users/lesnightingill/Code/get_back/spec")
File.exists?("/Users/lesnightingill/Code/get_back")
cont
system("/usr/local/opt/postgresql@9.6/bin/pg_dump -w -Fp --clean get_back_test > /Users/lesnightingill/Code/get_back/spec/dummy/tmp/sql_test.sql")
cont
psql get_back_test
db_config['database']
exit
system("#{pg_dump} -w -Fp --clean #{db_config['database']} > #{file}")
pg_dump
cont
file
db_config['database']
pg_dump
cont
`which pg_dump`.strip
`which pg_dump`
cont
clean_up_filesystem
cont
get_vault_list_request
cont
get_vault_list_request
get_vault_list
cont
self
cont
upload_response
cont
resp = AwsBackend.new.create_db_archive
archive
cont
archive
cont
get_vault_list_request
cont
get_vault_list_request
cont
get_vault_list_request
cont
get_vault_list_request
cont
get_vault_list_request
cont
con
cont
get_vault_list_request
cont
checksum(archive_contents)
list
archive_contents
cont
Rails.root
system("pwd")
cont
vault_list_info
cont
vault_list_info
cont
vault_list_info
cont
backtrace
vault_list_info
cont
Time.parse("2015-04-07T00:26:19.028Z")
Time.parse("2015-04-06T21:23:45.708Z")
cont
vault_list_info
cont
vault_list
cont
`pg_dump get_back_test > myfile.sql &`
cont
Rails.root
cont
`/usr/local/bin/pg_dump > spec/dummy/tmp/sql_test.sql`
`touch spec/dummy/tmp/sql_test.sql`
`pwd`
`touch tmp/sql_test.sql`
`/usr/local/bin/pg_dump > tmp/sql_test.sql`
exit
`#{dump_to_file(file)}`
exit
`psql`
`pwd`
exit
system("/usr/local/bin/pg_dump","get_back_test")
cont
`/usr/local/bin/pg_dump get_back_test`
AppDb
ActiveRecord::Base.connection.execute("select foo from test")
ActiveRecord::Base.connection.execute("select * from test").each(&:p)
ActiveRecord::Base.connection.execute("select * from test")
ActiveRecord::Base.connection.execute("select * from test")[1]
ActiveRecord::Base.connection.execute("select * from test")[0]
ActiveRecord::Base.connection.execute("select * from test").first
ActiveRecord::Base.connection.execute("select * from test").first.foo
ActiveRecord::Base.connection.execute("select * from test").first["foo"]
ActiveRecord::Base.connection.execute("select * from test")
Rails.env
cont
`psql`
psql
exit
%x[pg_dump get_back_test]
cont
`/usr/local/bin/pg_dump  get_back_test`
cont
`/usr/local/bin/pg_dump --quote-all-identifiers --clean --blobs get_back_test`
exit
`/usr/local/bin/pg_dump --quote-all-identifiers --clean --blobs get_back_test`
cont
`/usr/local/bin/pg_dump get_back_test`
`which pg_dump`
`which psql`
`pwd`
contents = `/usr/local/bin/pg_dump --quote-all-identifiers --clean --blobs get_back_test`
`/usr/local/bin/pg_dump --quote-all-identifiers --clean --blobs get_back_test`
exit
`pg_dump get_back_test`
cont
`/usr/local/bin/pg_dump get_back_test`
exit
